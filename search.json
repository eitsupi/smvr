[{"path":"https://eitsupi.github.io/smvr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 smvr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eitsupi.github.io/smvr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tatsuya Shima. Author, maintainer.","code":""},{"path":"https://eitsupi.github.io/smvr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shima T (2025). smvr: Simple Implementation Semantic Versioning. R package version 0.0.0.9000, https://eitsupi.github.io/smvr/.","code":"@Manual{,   title = {smvr: Simple Implementation of Semantic Versioning},   author = {Tatsuya Shima},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://eitsupi.github.io/smvr/}, }"},{"path":"https://eitsupi.github.io/smvr/index.html","id":"smvr","dir":"","previous_headings":"","what":"Simple Implementation of Semantic Versioning","title":"Simple Implementation of Semantic Versioning","text":"Simple implementation Semantic Versioning 2.0.0 R. smvr provides lightweight, fully vectorized R class Semantic Versioning. enables type-safe manipulation, comparison, sorting version numbers, integrates smoothly tidyverse tools.","code":""},{"path":"https://eitsupi.github.io/smvr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simple Implementation of Semantic Versioning","text":"development version can installed GitHub:","code":"pak::pak(\"eitsupi/smvr\")"},{"path":"https://eitsupi.github.io/smvr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Simple Implementation of Semantic Versioning","text":"","code":"library(smvr)  # Parse version characters into smvr objects v <- parse_semver(c(\"1.0.0\", \"1.0.0-alpha\", \"1.0.0-alpha.1\", \"1.0.1+20250621\", \"0.9.0\"))  # Sort versions sort(v) #> <smvr[5]> #> [1] 0.9.0          1.0.0-alpha    1.0.0-alpha.1  1.0.0          1.0.1+20250621  # Can compare with string notation v[v < \"1.0.0\"] #> <smvr[3]> #> [1] 1.0.0-alpha   1.0.0-alpha.1 0.9.0  # Works with tibble data frame and dplyr tibble::tibble(version = v) |>   dplyr::arrange(version) |>   dplyr::mutate(     `>= 1.0.0` = version >= \"1.0.0\",     `pre-release` = is_pre_release(version),   ) #> # A tibble: 5 × 3 #>          version `>= 1.0.0` `pre-release` #>           <smvr> <lgl>      <lgl>         #> 1          0.9.0 FALSE      FALSE         #> 2    1.0.0-alpha FALSE      TRUE          #> 3  1.0.0-alpha.1 FALSE      TRUE          #> 4          1.0.0 TRUE       FALSE         #> 5 1.0.1+20250621 TRUE       FALSE"},{"path":"https://eitsupi.github.io/smvr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Simple Implementation of Semantic Versioning","text":"Fully vectorized Semantic Versioning class. Type-safe comparison sorting. Tidyverse compatibility (tibble, dplyr, etc.). dependencies except vctrs.","code":""},{"path":"https://eitsupi.github.io/smvr/index.html","id":"known-limitations","dir":"","previous_headings":"","what":"Known Limitations","title":"Simple Implementation of Semantic Versioning","text":"number pre-release identifier fields limited 5.","code":"# Only 5 pre-release fields are supported: try(parse_semver(\"1.2.3-a.b.c.d.e.f\")) # Having 6 dot separated identifiers #> Error in parse_semver(\"1.2.3-a.b.c.d.e.f\") :  #>   Unsupported pre-release identifiers in '1.2.3-a.b.c.d.e.f'. #> ! Only up to 5 pre-release identifiers are supported, got 6."},{"path":"https://eitsupi.github.io/smvr/index.html","id":"related-works","dir":"","previous_headings":"","what":"Related Works","title":"Simple Implementation of Semantic Versioning","text":"semver package wrapper C++ SemVer parser. class provided package special list, work well tibble dplyr.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/as_smvr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to smvr vector — as_smvr","title":"Convert to smvr vector — as_smvr","text":"as_smvr() generic function converts object smvr vector. default method uses vctrs::vec_cast() convert object.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/as_smvr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to smvr vector — as_smvr","text":"","code":"as_smvr(x, ...)  # Default S3 method as_smvr(x, ...)"},{"path":"https://eitsupi.github.io/smvr/reference/as_smvr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to smvr vector — as_smvr","text":"x object convert smvr. ... Additional arguments passed methods.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/as_smvr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to smvr vector — as_smvr","text":"smvr class vector.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/as_smvr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to smvr vector — as_smvr","text":"","code":"as_smvr(c(\"1.0.0\", \"2.0.0-rc.1\", \"3.0.0+build.1\")) #> <smvr[3]> #> [1] 1.0.0         2.0.0-rc.1    3.0.0+build.1 as_smvr(numeric_version(c(\"1\", \"2.3\"))) #> <smvr[2]> #> [1] 1.0.0 2.3.0 as_smvr(NA) #> <smvr[1]> #> [1] <NA>"},{"path":"https://eitsupi.github.io/smvr/reference/check-component.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the smvr object has a specific component — check-component","title":"Check if the smvr object has a specific component — check-component","text":"functions check smvr object specific component. is_pre_release(): Checks pre-release identifiers present. has_build_metadata(): Checks build metadata present.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/check-component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the smvr object has a specific component — check-component","text":"","code":"is_pre_release(x)  has_build_metadata(x)"},{"path":"https://eitsupi.github.io/smvr/reference/check-component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the smvr object has a specific component — check-component","text":"x smvr object.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/check-component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the smvr object has a specific component — check-component","text":"Indicates whether x specified component.","code":""},{"path":[]},{"path":"https://eitsupi.github.io/smvr/reference/check-component.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the smvr object has a specific component — check-component","text":"","code":"v <- parse_semver(c(   \"1.0.0\", \"2.0.0-alpha\", \"2.0.0-beta\", \"2.0.0-beta.2+build.123\" )) v #> <smvr[4]> #> [1] 1.0.0                  2.0.0-alpha            2.0.0-beta             #> [4] 2.0.0-beta.2+build.123  is_pre_release(v) #> [1] FALSE  TRUE  TRUE  TRUE has_build_metadata(v) #> [1] FALSE FALSE FALSE  TRUE"},{"path":"https://eitsupi.github.io/smvr/reference/extract-component.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract each component of version numbers/labels — extract-component","title":"Extract each component of version numbers/labels — extract-component","text":"functions extract individual components version numbers labels, major, minor, patch numbers, , pre-release identifiers build metadata.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/extract-component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract each component of version numbers/labels — extract-component","text":"","code":"extract_major(x, ...)  extract_minor(x, ...)  extract_patch(x, ...)  extract_pre_release_ids(x, ...)  extract_build_metadata(x, ...)  # S3 method for class 'smvr' extract_major(x, ...)  # S3 method for class 'smvr' extract_minor(x, ...)  # S3 method for class 'smvr' extract_patch(x, ...)  # S3 method for class 'smvr' extract_pre_release_ids(x, ...)  # S3 method for class 'smvr' extract_build_metadata(x, ...)  # S3 method for class 'numeric_version' extract_major(x, ...)  # S3 method for class 'numeric_version' extract_minor(x, ...)  # S3 method for class 'numeric_version' extract_patch(x, ...)"},{"path":"https://eitsupi.github.io/smvr/reference/extract-component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract each component of version numbers/labels — extract-component","text":"x version object. ... Additional arguments passed methods.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/extract-component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract each component of version numbers/labels — extract-component","text":"extracted component version object. extract_major(), extract_minor(), extract_patch() return integer. extract_pre_release_ids() returns pre_release_ids. extract_build_metadata() returns character.","code":""},{"path":[]},{"path":"https://eitsupi.github.io/smvr/reference/extract-component.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract each component of version numbers/labels — extract-component","text":"","code":"sem_ver <- parse_semver(c(\"1.2.3-alpha+001\", \"2.0.0\", NA))  extract_major(sem_ver) #> [1]  1  2 NA extract_minor(sem_ver) #> [1]  2  0 NA extract_patch(sem_ver) #> [1]  3  0 NA extract_pre_release_ids(sem_ver) #> alpha #> <empty> #> <NA> extract_build_metadata(sem_ver) #> [1] \"001\" \"\"    NA     # Extracting version also works for numeric_version num_ver <- numeric_version(c(\"1\", \"3.1.4.1.5\", NA), strict = FALSE)  extract_major(num_ver) #> [1]  1  3 NA extract_minor(num_ver) #> [1]  0  1 NA extract_patch(num_ver) #> [1]  0  4 NA"},{"path":"https://eitsupi.github.io/smvr/reference/is_smvr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a smvr object — is_smvr","title":"Check if an object is a smvr object — is_smvr","text":"Check object smvr object","code":""},{"path":"https://eitsupi.github.io/smvr/reference/is_smvr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a smvr object — is_smvr","text":"","code":"is_smvr(x)"},{"path":"https://eitsupi.github.io/smvr/reference/is_smvr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a smvr object — is_smvr","text":"x object.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/is_smvr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a smvr object — is_smvr","text":"Indicates whether x smvr object.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/is_smvr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is a smvr object — is_smvr","text":"","code":"is_smvr(smvr(1, 2, 3)) #> [1] TRUE"},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_identifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Single pre-release identifier — pre_release_identifier","title":"Single pre-release identifier — pre_release_identifier","text":"class representing single pre-release identifier (alphanumeric numeric) Semantic Versioning 2.0.0.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_identifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single pre-release identifier — pre_release_identifier","text":"","code":"new_pre_release_identifier(x = character())"},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_identifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single pre-release identifier — pre_release_identifier","text":"x Something can coerced character vector vctrs::vec_cast(). element must ASCII alphanumerics, hyphens, empty string (\"\"). Empty string special case means identifier.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_identifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single pre-release identifier — pre_release_identifier","text":"pre_release_identifier vector.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_identifier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single pre-release identifier — pre_release_identifier","text":"Identifiers compared based following criteria: identifier empty, treated smallest value. Integers greater equal 0 treated numeric identifiers compared numerically. Else, identifiers treated alphanumeric identifiers compared lexically ASCII sort order. Numeric identifiers always lower precedence alphanumeric identifiers.","code":""},{"path":[]},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_identifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single pre-release identifier — pre_release_identifier","text":"","code":"id <- new_pre_release_identifier(   c(\"1\", \"2\", \"10\", \"01\", \"-1\", \"alpha\", \"beta\", \"\", NA) ) id #> 1 <numeric> #> 2 <numeric> #> 10 <numeric> #> 01 <alphanumeric> #> -1 <alphanumeric> #> alpha <alphanumeric> #> beta <alphanumeric> #> <empty> #> <NA>  # empty < numeric < alphanumeric vctrs::vec_sort(id) #> <empty> #> 1 <numeric> #> 2 <numeric> #> 10 <numeric> #> -1 <alphanumeric> #> 01 <alphanumeric> #> alpha <alphanumeric> #> beta <alphanumeric> #> <NA>  # Works with base R vectors. id[id == \"alpha\" & !is.na(id)] #> alpha <alphanumeric> id[id > 2L & !is.na(id)] #> 10 <numeric> #> 01 <alphanumeric> #> -1 <alphanumeric> #> alpha <alphanumeric> #> beta <alphanumeric>"},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-release identifiers — new_pre_release_ids","title":"Pre-release identifiers — new_pre_release_ids","text":"class representing collection identifiers, used representing pre-release versions. two functions create pre_release_ids vector: pre_release_ids() low-level constructor creating pre-release identifiers individual components. parse_pre_release_ids() parses character vector pre-release identifiers.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-release identifiers — new_pre_release_ids","text":"","code":"new_pre_release_ids(id1 = character(), id2 = \"\", id3 = \"\", id4 = \"\", id5 = \"\")  parse_pre_release_ids(x)"},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-release identifiers — new_pre_release_ids","text":"id1, id2, id3, id4, id5 Single pre-release identifiers. identifier can something cast pre_release_identifier vector vctrs::vec_cast(). components must length length 1 (recycled). x character vector representing pre-release identifiers. identifier separated dot (.) parsed pre_release_identifier.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-release identifiers — new_pre_release_ids","text":"pre_release_ids vector.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-release identifiers — new_pre_release_ids","text":"Internally, pre_release_ids store 5 pre_release_identifier. represent pre-release identifiers 5 components. passing character containing 5 components parse_pre_release_ids(), throw error. components empty, treated highest precedence pre-release ids, used indicate version pre-release version.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/pre_release_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-release identifiers — new_pre_release_ids","text":"","code":"# Each components are concatenated with a dot new_pre_release_ids(\"rc\", 1:3) #> rc.1 #> rc.2 #> rc.3  ids <- parse_pre_release_ids(   c(\"\", \"alpha.beta\", \"alpha.1\", \"beta\", \"beta.11\", \"beta.2\") ) ids #> <empty> #> alpha.beta #> alpha.1 #> beta #> beta.11 #> beta.2  # Empty ids have the highest precedence # (Used to indicate not a pre-release version) vctrs::vec_sort(ids) #> alpha.1 #> alpha.beta #> beta #> beta.2 #> beta.11 #> <empty>  # Can be compared with string notation ids[ids > \"beta.2\"] #> <empty> #> beta.11  # Limitation: only support up to 5 components parse_pre_release_ids(\"a.b.c.d.e\") #> a.b.c.d.e try(parse_pre_release_ids(\"a.b.c.d.e.f\")) #> Error in parse_pre_release_ids(\"a.b.c.d.e.f\") :  #>   Unsupported pre-release identifiers in 'a.b.c.d.e.f'. #> ! Only up to 5 pre-release identifiers are supported, got 6."},{"path":"https://eitsupi.github.io/smvr/reference/smvr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"smvr: Simple Implementation of Semantic Versioning — smvr-package","title":"smvr: Simple Implementation of Semantic Versioning — smvr-package","text":"Simple implementation Semantic Versioning 2.0.0 'vctrs' package. package provides simple way create, compare, manipulate semantic versions R. designed lightweight easy use.","code":""},{"path":[]},{"path":"https://eitsupi.github.io/smvr/reference/smvr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"smvr: Simple Implementation of Semantic Versioning — smvr-package","text":"Maintainer: Tatsuya Shima ts1s1andn@gmail.com","code":""},{"path":"https://eitsupi.github.io/smvr/reference/smvr.html","id":null,"dir":"Reference","previous_headings":"","what":"A vector representing versions following Semantic Versioning — smvr","title":"A vector representing versions following Semantic Versioning — smvr","text":"smvr class represents versions follow Semantic Versioning Specification (SemVer). version number contains three components, MAJOR.MINOR.PATCH, optional pre-release build metadata labels. similar base R's numeric_version class, always three components (major, minor, patch) supports pre-release build metadata labels. , unlike numeric_version, SemVer uses dots (.) separators allow hyphens (-) except indicate start pre-release label. two functions create smvr objects: smvr() constructor component. component must length length 1 (recycled). parse_semver() parses character vector.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/smvr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A vector representing versions following Semantic Versioning — smvr","text":"","code":"smvr(major = integer(), minor = 0L, patch = 0L, pre_release = \"\", build = \"\")  parse_semver(x)"},{"path":"https://eitsupi.github.io/smvr/reference/smvr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A vector representing versions following Semantic Versioning — smvr","text":"major, minor, patch Non-negative integers representing major, minor, patch version components. default values minor patch 0. pre_release Something can cast pre_release_ids vector. can empty (\"\") meaning non pre-release (default). build Optional build metadata character vector. pattern ^[-zA-Z0-9-]+ can contain multiple components separated dots (.). can empty (\"\") meaning build metadata (default). x character vector representing semantic versions. version follow Semantic Versioning Specification. Partial matches allowed (e.g., \"1.0\" valid).","code":""},{"path":"https://eitsupi.github.io/smvr/reference/smvr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A vector representing versions following Semantic Versioning — smvr","text":"smvr class vector.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/smvr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A vector representing versions following Semantic Versioning — smvr","text":"Build metadata used ordering, == != operators check exactly build metadata required equality. operators (<, <=, >, >=) ignore build metadata.","code":""},{"path":[]},{"path":"https://eitsupi.github.io/smvr/reference/smvr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A vector representing versions following Semantic Versioning — smvr","text":"","code":"# SemVer versions from components smvr(4, 1:5) #> <smvr[5]> #> [1] 4.1.0 4.2.0 4.3.0 4.4.0 4.5.0  # Parse SemVer versions from character v <- parse_semver(c(   \"1.0.0\",   \"1.0.0-alpha\",   \"1.0.0-beta\",   \"1.0.0-rc.1\",   \"1.0.0-rc.2\",   NA )) v #> <smvr[6]> #> [1] 1.0.0       1.0.0-alpha 1.0.0-beta  1.0.0-rc.1  1.0.0-rc.2  <NA>         # Sorting vctrs::vec_sort(v) #> <smvr[6]> #> [1] 1.0.0-alpha 1.0.0-beta  1.0.0-rc.1  1.0.0-rc.2  1.0.0       <NA>         # Can be compared with string notation v[v >= \"1.0.0-rc.2\" & !is.na(v)] #> <smvr[2]> #> [1] 1.0.0      1.0.0-rc.2  # Partial version components are treated as NA suppressWarnings(parse_semver(\"1.5\")) #> <smvr[1]> #> [1] <NA>  # The numeric_version class supports versions with # less than 3 components, and can be cast to smvr. numeric_version(\"1.5\") |>   vctrs::vec_cast(smvr()) #> <smvr[1]> #> [1] 1.5.0  # Be careful with hyphens in numeric_version and SemVer. # The following examples yield opposite results. numeric_version(\"1.0.0-1\") > \"1.0.0\" # 1.0.0-1 is the same as 1.0.0.1 #> [1] TRUE parse_semver(\"1.0.0-1\") > \"1.0.0\"    # 1.0.0-1 is a pre-release version #> [1] FALSE"},{"path":"https://eitsupi.github.io/smvr/reference/update-version.html","id":null,"dir":"Reference","previous_headings":"","what":"Update version components — update-version","title":"Update version components — update-version","text":"functions allows update components version objects. increment_major(), increment_minor(), increment_patch() update major, minor, patch version numbers respectively. mark_as_pre_release() marks version pre-release version. add_build_metadata() adds build metadata version.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/update-version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update version components — update-version","text":"","code":"increment_major(x, ...)  # S3 method for class 'smvr' increment_major(x, ...)  increment_minor(x, ...)  # S3 method for class 'smvr' increment_minor(x, ...)  increment_patch(x, ...)  # S3 method for class 'smvr' increment_patch(x, ...)  mark_as_pre_release(x, ...)  # S3 method for class 'smvr' mark_as_pre_release(x, ids = \"pre\", ...)  add_build_metadata(x, ...)  # S3 method for class 'smvr' add_build_metadata(x, metadata = \"\", ...)"},{"path":"https://eitsupi.github.io/smvr/reference/update-version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update version components — update-version","text":"x version object ... Additional arguments passed methods. ids character vector pre-release identifiers. metadata character vector build metadata.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/update-version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update version components — update-version","text":"updated version object specified changes applied.","code":""},{"path":"https://eitsupi.github.io/smvr/reference/update-version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update version components — update-version","text":"","code":"v <- parse_semver(c(\"0.9.9\", \"1.0.0-a.1\", \"1.1.0+1\"))  increment_major(v) #> <smvr[3]> #> [1] 1.0.0 2.0.0 2.0.0 increment_minor(v) #> <smvr[3]> #> [1] 0.10.0 1.1.0  1.2.0  increment_patch(v) #> <smvr[3]> #> [1] 0.9.10 1.0.1  1.1.1  mark_as_pre_release(v, ids = c(\"pre.1\")) #> <smvr[3]> #> [1] 0.9.9-pre.1   1.0.0-pre.1   1.1.0-pre.1+1 add_build_metadata(v, metadata = \"build.1\") #> <smvr[3]> #> [1] 0.9.9+build.1     1.0.0-a.1+build.1 1.1.0+build.1"}]
